import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)

ACCUWEATHER_API_KEY = "ACCUWEATHER_API_KEY"
TELEGRAM_TOKEN = "TELEGRAM_TOKEN_BOT"

# –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
TEXTS = {
    "ru": {
        "start": (
            "‚õÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–æ–≥–æ–¥–Ω—ã–π –ë–æ—Ç!\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø—Ä–∏—à–ª—é:\n"
            "- –¢–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É\n"
            "- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º\n"
            "- –°–æ–≤–µ—Ç—ã –ø–æ –æ–¥–µ–∂–¥–µ\n"
            "- –£–§-–∏–Ω–¥–µ–∫—Å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞"
        ),
        "input_city": "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        "city_not_found": "üö´ –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "weather_error": "üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ",
        "data_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
        "uv_index": {
            0: "üü¢ –ù–∏–∑–∫–∏–π (–±–µ–∑ –∑–∞—â–∏—Ç—ã)",
            1: "üü° –£–º–µ—Ä–µ–Ω–Ω—ã–π (SPF 15+)",
            2: "üü† –í—ã—Å–æ–∫–∏–π (SPF 30+)",
            3: "üî¥ –û–ø–∞—Å–Ω—ã–π (–∏–∑–±–µ–≥–∞–π—Ç–µ —Å–æ–ª–Ω—Ü–∞)"
        },
        "activities": {
            "clear": "üåû –Ø—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –∏–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è:\n- –ü–ª—è–∂–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞\n- –í–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫\n- –ü–∏–∫–Ω–∏–∫–∞",
            "rain": "üåßÔ∏è –í –¥–æ–∂–¥—å –ª—É—á—à–µ:\n- –ü–æ—Å–µ—Ç–∏—Ç—å –º—É–∑–µ–π\n- –ü–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É\n- –£—Å—Ç—Ä–æ–∏—Ç—å –∫–∏–Ω–æ–≤–µ—á–µ—Ä",
            "cloudy": "‚õÖ –ü—Ä–∏ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏:\n- –ü—Ä–æ–≥—É–ª–∫–∞ –≤ –ø–∞—Ä–∫–µ\n- –≠–∫—Å–∫—É—Ä—Å–∏—è\n- –§–æ—Ç–æ—Å–µ—Å—Å–∏—è",
            "snow": "‚ùÑÔ∏è –ó–∏–º–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n- –ö–∞—Ç–∞–Ω–∏–µ –Ω–∞ –ª—ã–∂–∞—Ö\n- –õ–µ–ø–∫–∞ —Å–Ω–µ–≥–æ–≤–∏–∫–∞\n- –ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥",
            "fog": "üå´Ô∏è –í —Ç—É–º–∞–Ω:\n- –ü–æ—Å–µ—â–µ–Ω–∏–µ —Å–ø–∞\n- –ê—Ä–æ–º–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ\n- –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã",
            "storm": "‚õàÔ∏è –ü—Ä–∏ –≥—Ä–æ–∑–µ:\n- –î–æ–º–∞—à–Ω–∏–π —É—é—Ç\n- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∞–ª–æ–≤\n- –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–µ—á–∫–∏"
        },
        "clothes": {
            "hot": "üëï –õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞:\n–®–æ—Ä—Ç—ã/—é–±–∫–∞ + —Ñ—É—Ç–±–æ–ª–∫–∞\n–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏",
            "warm": "üß• –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:\n–î–∂–∏–Ω—Å—ã + —Ä—É–±–∞—à–∫–∞\n–õ–µ–≥–∫–∞—è –≤–µ—Ç—Ä–æ–≤–∫–∞",
            "cool": "üß£ –ü—Ä–æ—Ö–ª–∞–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞:\n–°–≤–∏—Ç–µ—Ä + –±—Ä—é–∫–∏\n–î–µ–º–∏—Å–µ–∑–æ–Ω–Ω–∞—è –∫—É—Ä—Ç–∫–∞",
            "cold": "üß§ –•–æ–ª–æ–¥–Ω–æ:\n–¢–µ—Ä–º–æ–±–µ–ª—å–µ\n–ü—É—Ö–æ–≤–∏–∫\n–®–∞–ø–∫–∞ –∏ —à–∞—Ä—Ñ"
        },
        "history": "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:\n{}",
        "empty_history": "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞",
        "help": "‚ùì –ü–æ–º–æ—â—å:\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ",
        "menu": "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "language": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        "language_changed": "üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π",
        "temperature": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        "condition": "–°–æ—Å—Ç–æ—è–Ω–∏–µ",
        "wind": "–í–µ—Ç–µ—Ä",
        "recommendations": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        "clothing": "–û–¥–µ–∂–¥–∞"
    },
    "en": {
        "start": (
            "‚õÖ Welcome to Weather Bot!\n"
            "Send me a city name and I'll provide:\n"
            "- Current weather\n"
            "- Activity recommendations\n"
            "- Clothing advice\n"
            "- UV index and air quality"
        ),
        "input_city": "üåç Enter city name:",
        "city_not_found": "üö´ City not found",
        "weather_error": "üò¢ Failed to get weather data",
        "data_error": "‚ö†Ô∏è Data processing error",
        "uv_index": {
            0: "üü¢ Low (no protection)",
            1: "üü° Moderate (SPF 15+)",
            2: "üü† High (SPF 30+)",
            3: "üî¥ Dangerous (avoid sun)"
        },
        "activities": {
            "clear": "üåû Clear weather is perfect for:\n- Beach time\n- Cycling\n- Picnic",
            "rain": "üåßÔ∏è Rainy day activities:\n- Visit museum\n- Read a book\n- Movie night",
            "cloudy": "‚õÖ Cloudy weather ideas:\n- Park walk\n- City tour\n- Photo session",
            "snow": "‚ùÑÔ∏è Winter activities:\n- Skiing\n- Build a snowman\n- Hot chocolate",
            "fog": "üå´Ô∏è Foggy day:\n- Spa visit\n- Coffee break\n- Board games",
            "storm": "‚õàÔ∏è Stormy weather:\n- Stay home\n- Watch movies\n- Bake cookies"
        },
        "clothes": {
            "hot": "üëï Light clothes:\nShorts/skirt + t-shirt\nSunglasses",
            "warm": "üß• Moderate weather:\nJeans + shirt\nLight jacket",
            "cool": "üß£ Cool weather:\nSweater + pants\nFall jacket",
            "cold": "üß§ Cold weather:\nThermal wear\nDown coat\nHat and scarf"
        },
        "history": "üìú Search history:\n{}",
        "empty_history": "üì≠ History is empty",
        "help": "‚ùì Help:\nSend me a city name or use buttons below",
        "menu": "üëá Choose action:",
        "language": "üá¨üáß English",
        "language_changed": "üåê Language changed to English",
        "temperature": "Temperature",
        "condition": "Condition",
        "wind": "Wind",
        "recommendations": "Recommendations",
        "clothing": "Clothing"
    }
}

MENU_KEYBOARD = {
    "ru": InlineKeyboardMarkup([
        [InlineKeyboardButton("üå§Ô∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data='get_weather')],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data='show_history')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help'),
         InlineKeyboardButton("üåê –Ø–∑—ã–∫", callback_data='change_language')]
    ]),
    "en": InlineKeyboardMarkup([
        [InlineKeyboardButton("üå§Ô∏è Get Weather", callback_data='get_weather')],
        [InlineKeyboardButton("üìú History", callback_data='show_history')],
        [InlineKeyboardButton("‚ùì Help", callback_data='help'),
         InlineKeyboardButton("üåê Language", callback_data='change_language')]
    ])
}

LANGUAGE_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='ru'),
     InlineKeyboardButton("üá¨üáß English", callback_data='en')],
    [InlineKeyboardButton("üîô Back", callback_data='back_to_menu')]
])

BACK_KEYBOARD = {
    "ru": InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]),
    "en": InlineKeyboardMarkup([[InlineKeyboardButton("üîô Back", callback_data='back_to_menu')]])
}


def get_user_language(context: ContextTypes.DEFAULT_TYPE) -> str:
    return context.user_data.get('language', 'ru')


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(context)
    await update.message.reply_text(TEXTS[lang]["start"], reply_markup=MENU_KEYBOARD[lang])


async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = get_user_language(context)

    if query.data == 'get_weather':
        await query.edit_message_text(TEXTS[lang]["input_city"], reply_markup=BACK_KEYBOARD[lang])
    elif query.data == 'show_history':
        history = context.user_data.get('history', [])
        if history:
            text = TEXTS[lang]["history"].format("\n".join(f"‚Ä¢ {city.capitalize()}" for city in reversed(history[-5:])))
        else:
            text = TEXTS[lang]["empty_history"]
        await query.edit_message_text(text, reply_markup=BACK_KEYBOARD[lang])
    elif query.data == 'help':
        await query.edit_message_text(TEXTS[lang]["help"], reply_markup=BACK_KEYBOARD[lang])
    elif query.data == 'change_language':
        await query.edit_message_text("üåê Choose language:", reply_markup=LANGUAGE_KEYBOARD)
    elif query.data in ['ru', 'en']:
        context.user_data['language'] = query.data
        lang = query.data
        await query.edit_message_text(TEXTS[lang]["language_changed"], reply_markup=MENU_KEYBOARD[lang])
    elif query.data == 'back_to_menu':
        await query.edit_message_text(TEXTS[lang]["menu"], reply_markup=MENU_KEYBOARD[lang])


def get_location_key(city: str):
    try:
        url = "http://dataservice.accuweather.com/locations/v1/cities/search"
        params = {
            "apikey": ACCUWEATHER_API_KEY,
            "q": city,
            "language": "ru-ru"
        }
        response = requests.get(url, params=params)
        return response.json()[0]["Key"]
    except:
        return None


def get_weather_data(location_key: str):
    try:
        url = f"http://dataservice.accuweather.com/currentconditions/v1/{location_key}"
        params = {
            "apikey": ACCUWEATHER_API_KEY,
            "details": True,
            "language": "ru-ru"
        }
        response = requests.get(url, params=params)
        return response.json()[0]
    except:
        return None


def generate_report(city: str, weather: dict, lang: str):
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
        temp_data = weather.get("Temperature", {}).get("Metric", {})
        temp = temp_data.get("Value", "N/A")

        condition = weather.get("WeatherText", "N/A").lower()

        wind_data = weather.get("Wind", {}).get("Speed", {}).get("Metric", {})
        wind = wind_data.get("Value", "N/A")

        uv_value = weather.get("UVIndex", 0)
        uv = min(int(uv_value) // 3, 3) if isinstance(uv_value, (int, float)) else 0

        icon = weather.get("WeatherIcon", 0)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_key = "clear"
        if any(word in condition for word in ["rain", "–¥–æ–∂–¥—å", "storm", "–≥—Ä–æ–∑–∞"]):
            activity_key = "rain"
        elif any(word in condition for word in ["snow", "—Å–Ω–µ–≥"]):
            activity_key = "snow"
        elif 6 <= icon <= 11:
            activity_key = "cloudy"
        elif icon > 11:
            activity_key = "fog"

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ
        try:
            temp = float(temp)
            if temp >= 25:
                clothes_key = "hot"
            elif 18 <= temp < 25:
                clothes_key = "warm"
            elif 5 <= temp < 18:
                clothes_key = "cool"
            else:
                clothes_key = "cold"
        except:
            clothes_key = "cold"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = (
            f"üìç {city.capitalize()}\n\n"
            f"üå° {TEXTS[lang].get('temperature', 'Temperature')}: {temp}¬∞C\n"
            f"üåÄ {TEXTS[lang].get('condition', 'Condition')}: {condition.capitalize()}\n"
            f"üí® {TEXTS[lang].get('wind', 'Wind')}: {wind} km/h\n"
            f"üï∂ {TEXTS[lang].get('uv_index', 'UV Index')}: {TEXTS[lang]['uv_index'].get(uv, 'N/A')}\n\n"
            f"üéØ {TEXTS[lang].get('recommendations', 'Recommendations')}:\n{TEXTS[lang]['activities'].get(activity_key, '')}\n\n"
            f"üëö {TEXTS[lang].get('clothing', 'Clothing')}:\n{TEXTS[lang]['clothes'].get(clothes_key, '')}"
        )
        return report

    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] generate_report: {str(e)}")
        raise KeyError("Data processing error")


async def handle_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(context)
    city = update.message.text.strip().lower()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    context.user_data.setdefault('history', [])
    context.user_data['history'] = [city] + context.user_data['history'][:9]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π

    try:
        if location_key := get_location_key(city):
            if weather_data := get_weather_data(location_key):
                report = generate_report(city, weather_data, lang)
                await update.message.reply_text(report, reply_markup=MENU_KEYBOARD[lang])
            else:
                await update.message.reply_text(TEXTS[lang]["weather_error"], reply_markup=MENU_KEYBOARD[lang])
        else:
            await update.message.reply_text(TEXTS[lang]["city_not_found"], reply_markup=MENU_KEYBOARD[lang])
    except KeyError:
        await update.message.reply_text(TEXTS[lang]["data_error"], reply_markup=MENU_KEYBOARD[lang])
    except Exception as e:
        print(f"[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞] handle_weather: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞", reply_markup=MENU_KEYBOARD[lang])


def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_click))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_weather))
    print("‚úÖ Bot started!")
    app.run_polling()


if __name__ == "__main__":
    main()